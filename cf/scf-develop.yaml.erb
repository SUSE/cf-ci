---
resources:
  - name: src
    type: git
    source:
      uri: {{src-repo}}
      private_key: {{github-private-key}}
      branch: {{src-branch}}
      git_config:
      - name: submodule.fetchJobs
        value: 0 # Sane defaults, > 1

  - name: ci
    type: git
    source:
      uri: {{src-ci-repo}}
      private_key: {{github-private-key}}
      branch: {{src-ci-branch}}

  - name: s3.fissile-binary
    type: s3
    source:
      endpoint: {{s3-fissile-endpoint}}
      access_key_id: {{s3-fissile-access-key}}
      secret_access_key: {{s3-fissile-secret-key}}
      bucket: {{s3-fissile-bucket}}
      regexp: <%= s3_fissile_prefix || "" %>fissile-(.*)\.linux-amd64\.tgz

  - name: s3.stampy-binary
    type: s3
    source:
      endpoint: {{s3-stampy-endpoint}}
      access_key_id: {{s3-stampy-access-key}}
      secret_access_key: {{s3-stampy-secret-key}}
      bucket: {{s3-stampy-bucket}}
      regexp: <%= s3_stampy_prefix || "" %>stampy-(.*)\.g.*linux-amd64\.tgz

  - name: s3.certstrap-binary.linux
    type: s3
    source:
      endpoint: {{s3-certstrap-endpoint}}
      access_key_id: {{s3-certstrap-access-key}}
      secret_access_key: {{s3-certstrap-secret-key}}
      bucket: {{s3-certstrap-bucket}}
      regexp: <%= s3_certstrap_prefix || "" %>certstrap-(.*)\.linux-amd64\.tgz

  - name: s3.certstrap-binary.darwin
    type: s3
    source:
      endpoint: {{s3-certstrap-endpoint}}
      access_key_id: {{s3-certstrap-access-key}}
      secret_access_key: {{s3-certstrap-secret-key}}
      bucket: {{s3-certstrap-bucket}}
      regexp: <%= s3_certstrap_prefix || "" %>certstrap-(.*)\.darwin-amd64\.tgz

  - name: s3.scf-config.linux
    type: s3
    source:
      endpoint: {{s3-config-endpoint}}
      access_key_id: {{s3-config-access-key}}
      secret_access_key: {{s3-config-secret-key}}
      bucket: {{s3-config-bucket}}
      regexp: <%= s3_config_prefix || "" %>scf-linux-amd64-(.*)\.zip

  - name: s3.scf-config.darwin
    type: s3
    source:
      endpoint: {{s3-config-endpoint}}
      access_key_id: {{s3-config-access-key}}
      secret_access_key: {{s3-config-secret-key}}
      bucket: {{s3-config-bucket}}
      regexp: <%= s3_config_prefix || "" %>scf-darwin-amd64-(.*)\.zip

  - name: docker.fissile-stemcell
    type: docker-image
    source:
      repository: splatform/fissile-stemcell-ubuntu
      tag: trusty-0.g7dad5cc-1.4
      username: {{docker-username}}
      password: {{docker-password}}

  - name: docker.fissile-role-packages
    type: docker-image
    source:
      insecure_registries: [0.0.0.0/0]
      repository: <%= dockerhub_registry %><%= dockerhub_org %>/fissile-role-packages
      username: {{docker-username}}
      password: {{docker-password}}

<% scf_releases.keys.each do |release| %>
  - name: s3.scf-<%= release %>-tarball
    type: s3
    source:
      endpoint: {{s3-endpoint}}
      access_key_id: <%= s3_access_key %>
      secret_access_key: <%= s3_secret_key %>
      bucket: {{s3-bucket}}
      regexp: <%= s3_release_prefix || "" %>scf-<%= release %>-tarball-(.*)\.tgz
<% end %>

<% uaa_releases.keys.each do |release| %>
  - name: s3.uaa-<%= release %>-tarball
    type: s3
    source:
      endpoint: {{s3-endpoint}}
      access_key_id: <%= s3_access_key %>
      secret_access_key: <%= s3_secret_key %>
      bucket: {{s3-bucket}}
      regexp: <%= s3_release_prefix || "" %>uaa-<%= release %>-tarball-(.*)\.tgz
<% end %>

<% unless scf_releases.empty? %>
  - name: s3.scf-all-releases-tarball
    type: s3
    source:
      endpoint: {{s3-endpoint}}
      access_key_id: <%= s3_access_key %>
      secret_access_key: <%= s3_secret_key %>
      bucket: {{s3-bucket}}
      regexp: <%= s3_release_prefix || "" %>scf-all-releases-tarball-(.*)\.tgz
<% end %>

<% unless uaa_releases.empty? %>
  - name: s3.uaa-all-releases-tarball
    type: s3
    source:
      endpoint: {{s3-endpoint}}
      access_key_id: <%= s3_access_key %>
      secret_access_key: <%= s3_secret_key %>
      bucket: {{s3-bucket}}
      regexp: <%= s3_release_prefix || "" %>uaa-all-releases-tarball-(.*)\.tgz
<% end %>

<% scf_roles.each do |role| %>
  - name: docker.role-scf-<%= role['name'] %>
    type: docker-image
    source:
      insecure_registries: [0.0.0.0/0]
      repository: <%= dockerhub_registry %><%= dockerhub_org %>/scf-<%= role['name'] %>
      username: {{docker-username}}
      password: {{docker-password}}
<% end %>

<% uaa_roles.each do |role| %>
  - name: docker.role-uaa-<%= role['name'] %>
    type: docker-image
    source:
      insecure_registries: [0.0.0.0/0]
      repository: <%= dockerhub_registry %><%= dockerhub_org %>/uaa-<%= role['name'] %>
      username: {{docker-username}}
      password: {{docker-password}}
<% end %>

  - name: semver.scf-version
    type: semver
    source:
      driver: s3
      bucket: {{s3-bucket}}
      key: scf-version
      access_key_id: <%= s3_access_key %>
      secret_access_key: <%= s3_secret_key %>
      endpoint: {{s3-endpoint}}

  - name: s3.kube-dist
    type: s3
    source:
      access_key_id: {{s3-access-key}}
      bucket: {{s3-kube-bucket}}
      endpoint: {{s3-endpoint}}
      regexp: <%= s3_kube_prefix || "" %>scf-kube-(.*).zip$
      secret_access_key: {{s3-secret-key}}

#  Commented out because currently it lives in `scf-kube-*.zip`
#  - name: s3.helm-dist
#    type: s3
#    source:
#      access_key_id: {{s3-access-key}}
#      bucket: {{s3-helm-bucket}}
#      endpoint: {{s3-endpoint}}
#      regexp: <%= s3_helm_prefix || "" %>scf-helm-(.*).zip$
#      secret_access_key: {{s3-secret-key}}

<% if job_limit_pool %>
  - name: pool.job-limit
    type: pool
    source:
      uri: <%= job_limit_repo %>
      branch: <%= job_limit_branch %>
      pool: <%= job_limit_pool %>
      private_key: {{github-private-key}}
<% end %>

resource_types:
  - name: status
    type: docker-image
    source:
      repository: heliondevops/concourse-github-status

  - name: rsync-resource
    type: docker-image
    source:
        repository: mrsixw/concourse-rsync-resource

jobs:
  <% if manual_pull_sources %>
  - name: pull-sources
    # This job is only used to serialize pulling the sources so we don't try
    # to pull the same thing twice simultaneously.  Doing this allows concourse
    # to cache the pulled source code.
    plan:
      - aggregate:
        - get: src
        - get: ci
  <% end %>

<% scf_releases.each do |release, path| %>
  - name: create-scf-<%= release %>
    plan:
      - aggregate:
        - get: src
          passed:
          <% if manual_pull_sources %>
          - pull-sources
          <% end %>
          trigger: true
        - get: ci
        <% if job_limit_pool %>
        - put: pool.job-limit
          params: { acquire: true }
        <% end %>
      - do:
        - task: package-release
          file: ci/cf/tasks/create-release.yml
          params:
            RELEASE_NAME: <%= release.sub(/-release$/, '') %>
            RELEASE_DIR: src/<%= path %> # src/ is the concourse input name
            FISSILE_REPOSITORY: scf
        - put: s3.scf-<%= release %>-tarball
          params:
            file: out/scf-<%= release %>-tarball-*.tgz
        <% if job_limit_pool %>
        ensure:
          put: pool.job-limit
          params: { release: pool.job-limit }
        <% end %>
<% end %>

<% uaa_releases.each do |release, path| %>
  - name: create-uaa-<%= release %>
    plan:
      - aggregate:
        - get: src
          passed:
          <% if manual_pull_sources %>
          - pull-sources
          <% end %>
          trigger: true
        - get: ci
        <% if job_limit_pool %>
        - put: pool.job-limit
          params: { acquire: true }
        <% end %>
      - do:
        - task: package-release
          file: ci/cf/tasks/create-release.yml
          params:
            RELEASE_NAME: <%= release.sub(/-release$/, '') %>
            RELEASE_DIR: src/<%= path %> # src/ is the concourse input name
            FISSILE_REPOSITORY: uaa
        - put: s3.uaa-<%= release %>-tarball
          params:
            file: out/uaa-<%= release %>-tarball-*.tgz
        <% if job_limit_pool %>
        ensure:
          put: pool.job-limit
          params: { release: pool.job-limit }
        <% end %>
<% end %>

  - name: find-version
    plan:
      - aggregate:
        - get: src
          passed:
          <% if manual_pull_sources %>
          - pull-sources
          <% end %>
          trigger: true
        - get: ci
      - task: find-version
        file: ci/cf/tasks/find-version.yml
      - put: semver.scf-version
        params:
          file: out/version

  - name: package-bits
    plan:
      - aggregate:
        - get: src
          passed:
          <% if manual_pull_sources %>
          - pull-sources
          <% end %>
          trigger: true
        - get: ci
        - get: s3.certstrap-binary.linux
        - get: s3.certstrap-binary.darwin
        - get: s3.kube-dist
        - get: semver.scf-version
          passed:
          - find-version
      - task: package-bits
        file: ci/cf/tasks/package-bits.yml
      - aggregate:
        - put: s3.scf-config.linux
          params:
            file: out/scf-linux-amd64-*.zip
        - put: s3.scf-config.darwin
          params:
            file: out/scf-darwin-amd64-*.zip

  # Combine all the release tarballs to a single one
  # This is needed bacause fissile want all releases to be built being doing
  # anything, even if we don't require it for the image
<% unless scf_releases.empty? %>
  - name: combine-scf-releases
    plan:
      - aggregate:
        <% scf_releases.keys.sort.each do |release| %>
        - get: s3.scf-<%= release %>-tarball
          passed: [ create-scf-<%= release %> ]
        <% end %>
        - get: ci
        - get: src
          passed:
          - find-version
          <% scf_releases.keys.sort.each do |release| %>
          - create-scf-<%= release %>
          <% end %>
          trigger: true
        - get: semver.scf-version
          passed:
          - find-version
      - task: combine-releases
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ubuntu
              tag: "14.04"
          inputs:
          - name: src
          - name: ci
          - name: semver.scf-version
          <% scf_releases.keys.each do |release| %>
          - name: s3.scf-<%= release %>-tarball
          <% end %>
          run:
            path: ci/cf/tasks/combine-releases.sh
          params:
          outputs:
          - name: out
        params:
          FISSILE_REPOSITORY: scf
      - put: s3.scf-all-releases-tarball
        params:
          file: out/scf-all-releases-tarball-*.tgz
<% end %>

<% unless uaa_releases.empty? %>
  - name: combine-uaa-releases
    plan:
      - aggregate:
        <% uaa_releases.keys.sort.each do |release| %>
        - get: s3.uaa-<%= release %>-tarball
          passed: [ create-uaa-<%= release %> ]
        <% end %>
        - get: ci
        - get: src
          passed:
          - find-version
          <% uaa_releases.keys.sort.each do |release| %>
          - create-uaa-<%= release %>
          <% end %>
          trigger: true
        - get: semver.scf-version
          passed:
          - find-version
      - task: combine-releases
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ubuntu
              tag: "14.04"
          inputs:
          - name: src
          - name: ci
          - name: semver.scf-version
          <% uaa_releases.keys.each do |release| %>
          - name: s3.uaa-<%= release %>-tarball
          <% end %>
          run:
            path: ci/cf/tasks/combine-releases.sh
          outputs:
          - name: out
        params:
          FISSILE_REPOSITORY: uaa
      - put: s3.uaa-all-releases-tarball
        params:
          file: out/uaa-all-releases-tarball-*.tgz
<% end %>

<% scf_roles.each do |role| %>
  - name: scf-<%= role['name'] %>-image
    plan:
      - aggregate:
        - get: s3.fissile-binary
          trigger: true
        - get: src
          passed: [ combine-scf-releases ]
          trigger: true
        - get: ci
        - get: s3.scf-all-releases-tarball
          passed: [ combine-scf-releases ]
        - get: docker.fissile-stemcell
          params:
            save: true
        <% if job_limit_pool %>
        - put: pool.job-limit
          params: { acquire: true }
        <% end %>
      - do:
        - task: compile-role
          file: ci/cf/tasks/compile-role.yml
          privileged: true # mount namespaces
          image: docker.fissile-stemcell
          params:
            ROLE_NAME: <%= role['name'] %>
            FISSILE_REPOSITORY: scf
            SCF_RELEASES: <%= scf_releases.keys.join(' ') %>
            <% scf_releases.each_pair do |release, path| %>
            SCF_<%= release.upcase.gsub('-', '_') %>_PATH: <%= path %>
            <% end %>
            PROJECT_DIR: <%= scf_dir %>
          input_mapping:
            s3.all-releases-tarball: s3.scf-all-releases-tarball
        - task: build-image
          privileged: true
          file: ci/cf/tasks/build-image.yml
          image: docker.fissile-stemcell
          params:
            ROLE_NAME: <%= role['name'] %>
            FISSILE_REPOSITORY: scf
            SCF_RELEASES: <%= scf_releases.keys.join(' ') %>
            <% scf_releases.each_pair do |release, path| %>
            SCF_<%= release.upcase.gsub('-', '_') %>_PATH: <%= path %>
            <% end %>
            PROJECT_DIR: <%= scf_dir %>
          input_mapping:
            s3.all-releases-tarball: s3.scf-all-releases-tarball
          output_mapping:
            out: fissile-output
        - put: docker.fissile-role-packages
          params:
            build: fissile-output/role-packages
            load_base: docker.fissile-stemcell
            tag: fissile-output/role-packages.tag
          get_params:
            save: true
        - task: adjust-role-image-from
          file: ci/cf/tasks/adjust-role-image-from.yml
          params:
            ROLE_NAME: <%= role['name'] %>
            FISSILE_REPOSITORY: scf
        - put: docker.role-scf-<%= role['name'] %>
          params:
            build: adjusted-role-image
            load_base: docker.fissile-role-packages
            tag: adjusted-role-image/<%= role['name'] %>.tag
          get_params:
            skip_download: true
        <% if job_limit_pool %>
        ensure:
          put: pool.job-limit
          params: { release: pool.job-limit }
        <% end %>
<% end %>

<% uaa_roles.each do |role| %>
  - name: uaa-<%= role['name'] %>-image
    plan:
      - aggregate:
        - get: s3.fissile-binary
          trigger: true
        - get: src
          passed: [ combine-uaa-releases ]
          trigger: true
        - get: ci
        - get: s3.uaa-all-releases-tarball
          passed: [ combine-uaa-releases ]
        - get: docker.fissile-stemcell
          params:
            save: true
        <% if job_limit_pool %>
        - put: pool.job-limit
          params: { acquire: true }
        <% end %>
      - do:
        - task: compile-role
          file: ci/cf/tasks/compile-role.yml
          privileged: true # mount namespaces
          image: docker.fissile-stemcell
          params:
            ROLE_NAME: <%= role['name'] %>
            FISSILE_REPOSITORY: uaa
            UAA_RELEASES: <%= uaa_releases.keys.join(' ') %>
            <% uaa_releases.each_pair do |release, path| %>
            UAA_<%= release.upcase.gsub('-', '_') %>_PATH: <%= path %>
            <% end %>
            PROJECT_DIR: <%= uaa_dir %>
          input_mapping:
            s3.all-releases-tarball: s3.uaa-all-releases-tarball
        - task: build-image
          privileged: true
          file: ci/cf/tasks/build-image.yml
          image: docker.fissile-stemcell
          params:
            ROLE_NAME: <%= role['name'] %>
            FISSILE_REPOSITORY: uaa
            UAA_RELEASES: <%= uaa_releases.keys.join(' ') %>
            <% uaa_releases.each_pair do |release, path| %>
            UAA_<%= release.upcase.gsub('-', '_') %>_PATH: <%= path %>
            <% end %>
            PROJECT_DIR: <%= uaa_dir %>
          input_mapping:
            s3.all-releases-tarball: s3.uaa-all-releases-tarball
          output_mapping:
            out: fissile-output
        - put: docker.fissile-role-packages
          params:
            build: fissile-output/role-packages
            load_base: docker.fissile-stemcell
            tag: fissile-output/role-packages.tag
          get_params:
            save: true
        - task: adjust-role-image-from
          file: ci/cf/tasks/adjust-role-image-from.yml
          params:
            ROLE_NAME: <%= role['name'] %>
            FISSILE_REPOSITORY: uaa
        - put: docker.role-uaa-<%= role['name'] %>
          params:
            build: adjusted-role-image
            load_base: docker.fissile-role-packages
            tag: adjusted-role-image/<%= role['name'] %>.tag
          get_params:
            skip_download: true
        <% if job_limit_pool %>
        ensure:
          put: pool.job-limit
          params: { release: pool.job-limit }
        <% end %>
<% end %>

  - name: kube-dist
    plan:
    - aggregate:
      - get: src
        passed:
        - combine-scf-releases
        - combine-uaa-releases
        trigger: true
      - get: ci
      - get: s3.fissile-binary
        trigger: true
      - get: s3.stampy-binary
      - get: s3.certstrap-binary.linux
      - get: s3.scf-all-releases-tarball
        passed: [ combine-scf-releases ]
      - get: s3.uaa-all-releases-tarball
        passed: [ combine-uaa-releases ]
    - task: kube-dist
      file: ci/cf/tasks/kube-dist.yml
      privileged: true
      params:
        SCF_RELEASES: <%= scf_releases.keys.join(' ') %>
        UAA_RELEASES: <%= uaa_releases.keys.join(' ') %>
        <% scf_releases.each_pair do |release, path| %>
        SCF_<%= release.upcase.gsub('-', '_') %>_PATH: <%= path %>
        <% end %>
        <% uaa_releases.each_pair do |release, path| %>
        UAA_<%= release.upcase.gsub('-', '_') %>_PATH: <%= path %>
        <% end %>
    - put: s3.kube-dist
      params:
        file: out/scf-kube-*.zip
        acl: public-read
#    - put: s3.helm-dist
#      params:
#        file: out/scf-helm-*.zip
#        acl: public-read

groups:
- name: packaging
  jobs:
  - package-bits
- name: releases
  jobs:
  <% if manual_pull_sources %>
  - pull-sources
  <% end %>
  <% scf_releases.keys.each do |release| %>
  - create-scf-<%= release %>
  <% end %>
  <% uaa_releases.keys.each do |release| %>
  - create-uaa-<%= release %>
  <% end %>
  - find-version
  <% unless scf_releases.empty? %>
  - combine-scf-releases
  <% end %>
  <% unless uaa_releases.empty? %>
  - combine-uaa-releases
  <% end %>
- name: scf-images
  jobs:
  <% scf_roles.each do |role| %>
  - scf-<%= role['name'] %>-image
  <% end %>
<% unless uaa_roles.empty? %>
- name: uaa-images
  jobs:
  <% uaa_roles.each do |role| %>
  - uaa-<%= role['name'] %>-image
  <% end %>
<% end %>
- name: extras
  jobs:
  - kube-dist
