# Concourse pipeline to deploy and upgrade CAP

resource_types:
- name: github-status
  type: docker-image
  source:
    repository: resource/github-status
    tag: release

resources:
- name: s3.pg-sidecar
  type: s3
  source:
    endpoint: ((s3-config-endpoint))
    access_key_id: ((s3-config-access-key))
    secret_access_key: ((s3-config-secret-key))
    bucket: ((s3-config-bucket-sles))
    regexp: ((s3-config-prefix-sidecars))cf-usb-sidecar-postgres-(.*)\.tgz$

- name: s3.mysql-sidecar
  type: s3
  source:
    endpoint: ((s3-config-endpoint))
    access_key_id: ((s3-config-access-key))
    secret_access_key: ((s3-config-secret-key))
    bucket: ((s3-config-bucket-sles))
    regexp: ((s3-config-prefix-sidecars))cf-usb-sidecar-mysql-(.*)\.tgz$

- name: ci
  type: git
  source:
    uri: ((src-ci-repo))
    branch: ((src-ci-branch))
    paths:
    - qa-pipelines/*
    - sample-apps/*

- name: s3.scf-config-sles
  type: s3
  source:
    endpoint: ((s3-config-endpoint))
    access_key_id: ((s3-config-access-key))
    secret_access_key: ((s3-config-secret-key))
    bucket: ((s3-config-bucket-sles))
    regexp: ((s3-config-prefix-sles))scf-sle-(.*)\.zip$

- name: pool.kube-hosts
  type: pool
  source:
    uri: ((kube-pool-repo))
    private_key: ((kube-pool-key))
    branch: ((kube-pool-branch))
    pool: ((kube-pool-pool))

- name: status.src
  type: github-status
  source:
    repo: ((src-repo))
    access_token: ((github-access-token))

jobs:
- name: ((pipeline-name))-SA
  plan:
  - do:
    - aggregate:
      - get: ci
      - get: s3.pg-sidecar
        trigger: true
      - get: s3.mysql-sidecar
        trigger: true
      - get: s3.scf-config-sles
        trigger: true
      - put: pool.kube-hosts
        params: {acquire: true}
    - task: cf-get-commit-id
      file: ci/qa-pipelines/tasks/cf-get-commit-id.yml
      input_mapping:
        s3.archive: s3.scf-config-sles
    - put: status.src
      params: &status-params-SA
        context: ((pipeline-name))-SA
        description: "QA Pipeline: ((pipeline-name)) (SLES non-HA)"
        path: commit-id/sha
        state: pending
    on_failure:
      put: pool.kube-hosts
      params: {release: pool.kube-hosts}
  - do:
    - task: cf-deploy-pre-upgrade
      file: ci/qa-pipelines/tasks/cf-deploy.yml
      params:
        KUBE_REGISTRY_HOSTNAME: ((registry-hostname))
        KUBE_REGISTRY_USERNAME: ((registry-username))
        KUBE_REGISTRY_PASSWORD: ((registry-password))
        KUBE_ORGANIZATION: ((organization))
        HA: false
        SCALED_HA: false
        MAGIC_DNS_SERVICE: ((magic-dns-service))
        CAP_INSTALL_VERSION: ((cap-sle-url))
        ENABLE_CF_DEPLOY_PRE_UPGRADE: ((enable-cf-deploy-pre-upgrade))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    - task: cf-smoke-tests-pre-upgrade
      file: ci/qa-pipelines/tasks/run-test.yml
      params:
        CAP_INSTALL_VERSION: ((cap-sle-url))
        ENABLE_CF_SMOKE_TESTS_PRE_UPGRADE: ((enable-cf-smoke-tests-pre-upgrade))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    - task: acceptance-tests-brain-pre-upgrade
      file: ci/qa-pipelines/tasks/run-test.yml
      params:
        CAP_INSTALL_VERSION: ((cap-sle-url))
        ENABLE_CF_BRAIN_TESTS_PRE_UPGRADE: ((enable-cf-brain-tests-pre-upgrade))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    - task: acceptance-tests-pre-upgrade
      file: ci/qa-pipelines/tasks/run-test.yml
      params:
        CAP_INSTALL_VERSION: ((cap-sle-url))
        ENABLE_CF_ACCEPTANCE_TESTS_PRE_UPGRADE: ((enable-cf-acceptance-tests-pre-upgrade))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    - task: usb-deploy
      file: ci/qa-pipelines/tasks/usb-deploy.yml
      params:
        ENABLE_USB_DEPLOY: ((enable-usb-deploy))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
    - task: cf-upgrade
      file: ci/qa-pipelines/tasks/cf-upgrade.yml
      params:
        KUBE_REGISTRY_HOSTNAME: ((registry-hostname))
        KUBE_REGISTRY_USERNAME: ((registry-username))
        KUBE_REGISTRY_PASSWORD: ((registry-password))
        KUBE_ORGANIZATION: ((organization))
        HA: false
        SCALED_HA: false
        MAGIC_DNS_SERVICE: ((magic-dns-service))
        ENABLE_CF_UPGRADE: ((enable-cf-upgrade))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    - task: usb-post-upgrade
      file: ci/qa-pipelines/tasks/usb-post-upgrade.yml
      params:
        ENABLE_USB_POST_UPGRADE: ((enable-usb-post-upgrade))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
    - task: cf-deploy
      file: ci/qa-pipelines/tasks/cf-deploy.yml
      params:
        KUBE_REGISTRY_HOSTNAME: ((registry-hostname))
        KUBE_REGISTRY_USERNAME: ((registry-username))
        KUBE_REGISTRY_PASSWORD: ((registry-password))
        KUBE_ORGANIZATION: ((organization))
        HA: false
        SCALED_HA: false
        MAGIC_DNS_SERVICE: ((magic-dns-service))
        ENABLE_CF_DEPLOY: ((enable-cf-deploy))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    - task: cf-smoke-tests
      file: ci/qa-pipelines/tasks/run-test.yml
      params:
        ENABLE_CF_SMOKE_TESTS: ((enable-cf-smoke-tests))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    - task: acceptance-tests-brain
      file: ci/qa-pipelines/tasks/run-test.yml
      params:
        ENABLE_CF_BRAIN_TESTS: ((enable-cf-brain-tests))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    - task: acceptance-tests
      file: ci/qa-pipelines/tasks/run-test.yml
      params:
        ENABLE_CF_ACCEPTANCE_TESTS: ((enable-cf-acceptance-tests))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    # We intentionally don't put the teardown and pool release steps in an ensure
    # block, so that when tests fail we have a chance of examining why things are
    # failing.
    - task: cf-teardown
      file: ci/qa-pipelines/tasks/cf-teardown.yml
      timeout: 1h
      params:
        ENABLE_CF_TEARDOWN: ((enable-cf-teardown))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
    - put: pool.kube-hosts
      params: {release: pool.kube-hosts}
    on_success:
      put: status.src
      params:
        <<: *status-params-SA
        state: success
    on_failure:
      put: status.src
      params:
        <<: *status-params-SA
        state: failure
- name: ((pipeline-name))-HA
  plan:
  - do:
    - aggregate:
      - get: ci
      - get: s3.pg-sidecar
        trigger: true
      - get: s3.mysql-sidecar
        trigger: true
      - get: s3.scf-config-sles
        trigger: true
      - put: pool.kube-hosts
        params: {acquire: true}
    - task: cf-get-commit-id
      file: ci/qa-pipelines/tasks/cf-get-commit-id.yml
      input_mapping:
        s3.archive: s3.scf-config-sles
    - put: status.src
      params: &status-params-HA
        context: ((pipeline-name))-HA
        description: "QA Pipeline: ((pipeline-name)) (SLES HA)"
        path: commit-id/sha
        state: pending
    on_failure:
      put: pool.kube-hosts
      params: {release: pool.kube-hosts}
  - do:
    - task: cf-deploy-pre-upgrade
      file: ci/qa-pipelines/tasks/cf-deploy.yml
      params:
        KUBE_REGISTRY_HOSTNAME: ((registry-hostname))
        KUBE_REGISTRY_USERNAME: ((registry-username))
        KUBE_REGISTRY_PASSWORD: ((registry-password))
        KUBE_ORGANIZATION: ((organization))
        HA: true
        SCALED_HA: false
        MAGIC_DNS_SERVICE: ((magic-dns-service))
        CAP_INSTALL_VERSION: ((cap-sle-url))
        ENABLE_CF_DEPLOY_PRE_UPGRADE: ((enable-cf-deploy-pre-upgrade))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    - task: cf-smoke-tests-pre-upgrade
      file: ci/qa-pipelines/tasks/run-test.yml
      params:
        CAP_INSTALL_VERSION: ((cap-sle-url))
        ENABLE_CF_SMOKE_TESTS_PRE_UPGRADE: ((enable-cf-smoke-tests-pre-upgrade))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    - task: acceptance-tests-brain-pre-upgrade
      file: ci/qa-pipelines/tasks/run-test.yml
      params:
        CAP_INSTALL_VERSION: ((cap-sle-url))
        ENABLE_CF_BRAIN_TESTS_PRE_UPGRADE: ((enable-cf-brain-tests-pre-upgrade))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    - task: acceptance-tests-pre-upgrade
      file: ci/qa-pipelines/tasks/run-test.yml
      params:
        CAP_INSTALL_VERSION: ((cap-sle-url))
        ENABLE_CF_ACCEPTANCE_TESTS_PRE_UPGRADE: ((enable-cf-acceptance-tests-pre-upgrade))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    - task: usb-deploy
      file: ci/qa-pipelines/tasks/usb-deploy.yml
      params:
        ENABLE_USB_DEPLOY: ((enable-usb-deploy))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
    - task: cf-upgrade
      file: ci/qa-pipelines/tasks/cf-upgrade.yml
      params:
        KUBE_REGISTRY_HOSTNAME: ((registry-hostname))
        KUBE_REGISTRY_USERNAME: ((registry-username))
        KUBE_REGISTRY_PASSWORD: ((registry-password))
        KUBE_ORGANIZATION: ((organization))
        HA: true
        SCALED_HA: false
        MAGIC_DNS_SERVICE: ((magic-dns-service))
        ENABLE_CF_UPGRADE: ((enable-cf-upgrade))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    - task: usb-post-upgrade
      file: ci/qa-pipelines/tasks/usb-post-upgrade.yml
      params:
        ENABLE_USB_POST_UPGRADE: ((enable-usb-post-upgrade))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
    - task: cf-deploy
      file: ci/qa-pipelines/tasks/cf-deploy.yml
      params:
        KUBE_REGISTRY_HOSTNAME: ((registry-hostname))
        KUBE_REGISTRY_USERNAME: ((registry-username))
        KUBE_REGISTRY_PASSWORD: ((registry-password))
        KUBE_ORGANIZATION: ((organization))
        HA: true
        SCALED_HA: false
        MAGIC_DNS_SERVICE: ((magic-dns-service))
        ENABLE_CF_DEPLOY: ((enable-cf-deploy))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    - task: cf-smoke-tests
      file: ci/qa-pipelines/tasks/run-test.yml
      params:
        ENABLE_CF_SMOKE_TESTS: ((enable-cf-smoke-tests))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    - task: acceptance-tests-brain
      file: ci/qa-pipelines/tasks/run-test.yml
      params:
        ENABLE_CF_BRAIN_TESTS: ((enable-cf-brain-tests))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    - task: acceptance-tests
      file: ci/qa-pipelines/tasks/run-test.yml
      params:
        ENABLE_CF_ACCEPTANCE_TESTS: ((enable-cf-acceptance-tests))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
      input_mapping:
        s3.scf-config: s3.scf-config-sles
    # We intentionally don't put the teardown and pool release steps in an ensure
    # block, so that when tests fail we have a chance of examining why things are
    # failing.
    - task: cf-teardown
      file: ci/qa-pipelines/tasks/cf-teardown.yml
      timeout: 1h
      params:
        ENABLE_CF_TEARDOWN: ((enable-cf-teardown))
        GKE_SERVICE_ACCOUNT_EMAIL: ((gke-service-account-email))
        GKE_PRIVATE_KEY: ((gke-private-key))
        GKE_PROJECT_ID: ((gke-project-id))
    - put: pool.kube-hosts
      params: {release: pool.kube-hosts}
    on_success:
      put: status.src
      params:
        <<: *status-params-HA
        state: success
    on_failure:
      put: status.src
      params:
        <<: *status-params-HA
        state: failure
