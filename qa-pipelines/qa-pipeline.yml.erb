<%

# ERB processing section

def bundle_url_from_version(domain, version)
  case version
    when true    then '""'      # Use latest version in bucket
    when false   then '""'      # Don't install (non-upgrade pipelines, for example; task will not be rendered)
    when /:\/\// then version # URL
    else "https://#{domain}/#{version}.zip"
  end
end

is_upgrade_pipeline = enable_cf_deploy_pre_upgrade || enable_cf_smoke_tests_pre_upgrade || enable_cf_brain_tests_pre_upgrade || enable_cf_usb_upgrade_tests

# Convert a multiline string into a string with literal '\n's for YAML to parse as multiline string
class ::String
  def yamlify()
    self.gsub("\n", '\n')
  end
end

cap_install_url ||= nil
cap_pre_upgrade_url ||= nil

terraform_platform=nil
terraform_platforms.each do |platform|
  terraform_platform=platform if eval("terraform_#{platform}")
end

%>

---

# Concourse pipeline to deploy and upgrade CAP

aliases:
  # This section is only used for anchor targets; this is not a real concourse
  # pipeline definition section.
  common-task-params: &common-task-params
    KUBE_REGISTRY_HOSTNAME: <%= registry_hostname %>
    KUBE_REGISTRY_USERNAME: <%= registry_username %>
    KUBE_REGISTRY_PASSWORD: <%= registry_password %>
    KUBE_ORGANIZATION: <%= organization %>
    MAGIC_DNS_SERVICE: <%= magic_dns_service %>
    # Used in deploy/pre-upgrade, upgrades, teardown
    EXTERNAL_DB: <%= enable_external_uaa_scf_db == true %>

    # AWS/EKS configuration
    AZ_SP_APPID: <%= az_sp_app_id %>
    AZ_SP_PASSWORD: <%= az_sp_password %>
    AZ_SP_TENANT: <%= az_sp_tenant %>
    AWS_ACCESS_KEY_ID: <%= aws_jenkins_access_key %>
    AWS_SECRET_ACCESS_KEY: <%= aws_jenkins_secret_key %>

    # GCP/GKE configuration
    GKE_PRIVATE_KEY_BASE64: "<%= gke_private_key_base64.yamlify %>"

    # AKS ARM credentials
    ARM_CLIENT_ID: <%= arm_client_id %>
    ARM_CLIENT_SECRET: <%= arm_client_secret %>
    ARM_TENANT_ID: <%= az_sp_tenant %>
    ARM_SUBSCRIPTION_ID: <%= arm_subscription_id %>

    CAP_BUNDLE_URL: <%= bundle_url_from_version("#{s3_config_bucket_sles}.s3.amazonaws.com", cap_install_url || enable_cf_deploy) %>
    <% if klog_collection_on_failure %>
    KLOG_COLLECTION_ON_FAILURE: <%= s3_config_bucket_sles %>-klogs-archive/<%= s3_klog_prefix %>
    <% else %>
    KLOG_COLLECTION_ON_FAILURE: false
    <% end %> # klog_collection_on_failure
    <% if test_ha_strict_enable || test_ha_strict_disable %>
    HA_STRICT: <%= test_ha_strict_enable %>
    <% end %> # test_ha_strict_enable || test_ha_strict_disable %>

  upgrade-task-params: &upgrade-task-params
    << : *common-task-params
    CAP_BUNDLE_URL: <%= bundle_url_from_version("#{s3_config_bucket_sles}.s3.amazonaws.com", cap_pre_upgrade_url || enable_cf_deploy_pre_upgrade) %>

  s3-common-params: &s3-common-params
    endpoint: <%= s3_config_endpoint %>
    access_key_id: <%= s3_config_access_key %>
    secret_access_key: <%= s3_config_secret_key %>
    bucket: <%= s3_config_bucket_sles %>

  deploy-upgrade-params: &deploy-upgrade-params
    ENABLE_CREDHUB: <%= enable_credhub == true %>
    ENABLE_AUTOSCALER: <%= enable_autoscaler == true %>
    EMBEDDED_UAA: <%= enable_embedded_uaa == true %>

  # Terraform AKS Configuration
  terraform-aks-params: &terraform-aks-params
    << : *common-task-params
    TF_VAR_client_id: <%= arm_client_id %>
    TF_VAR_client_secret: <%= arm_client_secret %>
    TF_VAR_location: <%= terraform_aks_location %>
    terraform_platform: aks

  # Terraform GKE Configuration
  terraform-gke-params: &terraform-gke-params
    << : *common-task-params
    TF_VAR_vm_type: UBUNTU
    TF_VAR_k8s_version: latest
    TF_VAR_location: <%= terraform_gke_location %>
    terraform_platform: gke

resource_types:
- name: meta
  type: docker-image
  source:
    repository: swce/metadata-resource
<% if status_reporting %>
- name: email
  type: docker-image
  source:
    repository: pcfseceng/email-resource
- name: github-status
  type: docker-image
  source:
    repository: resource/github-status
    tag: release
<% end %>
resources:
# CI helper scripts repository
- name: ci
  type: git
  source:
    uri: <%= src_ci_repo %>
    branch: <%= src_ci_branch %>
    paths:
    - qa-pipelines/*
    - sample-apps/*

# USB sidecar archive for postgres
- name: s3.pg-sidecar
  type: s3
  source:
    << : *s3-common-params
    regexp: <%= s3_config_prefix_sidecars %>cf-usb-sidecar-postgres-(.*)\.tgz$
# USB sidecar archive for MySQL
- name: s3.mysql-sidecar
  type: s3
  source:
    << : *s3-common-params
    regexp: <%= s3_config_prefix_sidecars %>cf-usb-sidecar-mysql-(.*)\.tgz$

# SCF bundle to install from (upgrade target, if upgrading)
- name: s3.scf-config-sles
  type: s3
  source:
    << : *s3-common-params
    regexp: <%= s3_config_prefix_sles %>scf-sle-(.*)\.zip$

# Pool resource with kube cluster information
- name: pool.kube-hosts
  type: pool
  source:
    uri: <%= kube_pool_repo %>
    private_key: "<%= kube_pool_key.yamlify %>"
    branch: <%= kube_pool_name %>-kube-hosts
    pool: <%= kube_pool_name %>-kube-hosts

- name: meta
  type: meta

# GitHub commit status
<% if status_reporting %>
- name: status.src
  type: github-status
  source:
    repo: <%= src_repo %>
    access_token: <%= github_access_token %>
- name: status.email
  type: email
  source:
    smtp:
      host: <%= status_email_host %>
      port: "<%= status_email_port %>"
      username: <%= status_email_username %>
      password: <%= status_email_password %>
    from: <%= status_email_sender %>
    to: [<%= status_email_receiver %>]
<% end %> # status_reporting

<% if klog_collection_on_failure %>
- name: s3.klog-destination
  type: s3
  source:
    << : *s3-common-params
    bucket: <%= s3_config_bucket_sles %>-klogs-archive
    regexp: <%= s3_klog_prefix %>/klog-(.*)\.tar\.gz$
<% end %> # klog_collection_on_failure

jobs:
<% %w(SA HA).each do |avail| %>
- name: <%= pipeline_name %>-<%= avail %>
  plan:
  - do:
    - aggregate:
      - get: ci
      - get: meta
      - get: s3.pg-sidecar
        trigger: true
      - get: s3.mysql-sidecar
        trigger: true
      - get: s3.scf-config-sles
        trigger: true
    <% if terraform_platform %>
    - task: terraform-deploy-<%= terraform_platform %>
      file: ci/qa-pipelines/tasks/terraform-deploy.yml
      params:
        << : *terraform-<%= terraform_platform %>-params
    - put: pool.kube-hosts
      params: {add: kubeconfig-pool}
      timeout: 2m
    <% end %> # terraform_platform
    - put: pool.kube-hosts
      params: {acquire: true}
      timeout: 2m
    - task: cf-get-commit-id
      file: ci/qa-pipelines/tasks/cf-get-commit-id.yml
      <% if is_upgrade_pipeline %>
      params:
        CAP_BUNDLE_URL: <%= bundle_url_from_version("#{s3_config_bucket_sles}.s3.amazonaws.com", enable_cf_deploy_pre_upgrade) %>
      <% end %> # is_upgrade_pipeline
      input_mapping:
        s3.archive: s3.scf-config-sles
    <% if status_reporting %>
    - put: status.src
      params: &status-params-<%= avail %>
        context: <%= pipeline_name %>-<%= avail %>
        description: "QA Pipeline: <%= pipeline_name %> (SLES <%= avail %>)"
        path: commit-id/sha
        state: pending
    <% end %> # status_reporting
    on_failure:
      <% if terraform_platform %>
      try:
        do:
          - task: clean_terraform_deploy
            file: ci/qa-pipelines/tasks/clean_terraform_deploy.yml
            params:
              << : *common-task-params
              terraform_platform: <%= terraform_platform %>
          - put: pool.kube-hosts
            params: {remove: pool.kube-hosts}
      <% end %> # terraform_platform
      <% if !terraform_platform %>
      put: pool.kube-hosts
      params: {release: pool.kube-hosts}
      <% end %> # !terraform_platform
  - do:
    <% if enable_cf_deploy_pre_upgrade %>
    - task: cf-deploy-pre-upgrade
      file: ci/qa-pipelines/tasks/cf-deploy.yml
      params:
        << : *upgrade-task-params
        << : *deploy-upgrade-params
        HA: <%= avail == 'HA' %>
      input_mapping:
        s3.scf-config: s3.scf-config-sles
      timeout: 5h
    <% end %> # enable_cf_deploy_pre_upgrade
    <% if enable_cf_smoke_tests_pre_upgrade %>
    - task: cf-smoke-tests-pre-upgrade
      file: ci/qa-pipelines/tasks/run-test.yml
      params:
        << : *upgrade-task-params
        TEST_NAME: smoke-tests
      input_mapping:
        s3.scf-config: s3.scf-config-sles
      timeout: 1h
    <% end %> # enable_cf_smoke_tests_pre_upgrade
    <% if enable_cf_brain_tests_pre_upgrade %>
    - task: acceptance-tests-brain-pre-upgrade
      file: ci/qa-pipelines/tasks/run-test.yml
      params:
        << : *upgrade-task-params
        TEST_NAME: acceptance-tests-brain
      input_mapping:
        s3.scf-config: s3.scf-config-sles
      timeout: 3h
    <% end %> # enable_cf_brain_tests_pre_upgrade
    <% if enable_cf_usb_upgrade_tests %>
    - task: usb-deploy-pre-upgrade
      file: ci/qa-pipelines/tasks/usb-deploy.yml
      params:
        << : *upgrade-task-params
    <% end %> # enable_cf_usb_upgrade_tests
    <% if status_reporting %>
    - task: cf-get-commit-id
      file: ci/qa-pipelines/tasks/cf-get-commit-id.yml
      input_mapping:
        s3.archive: s3.scf-config-sles
    <% end %> # status_reporting
    <% if enable_cf_upgrade %>
    - task: cf-upgrade
      file: ci/qa-pipelines/tasks/cf-upgrade.yml
      params:
        << : *common-task-params
        << : *deploy-upgrade-params
        HA: <%= avail == 'HA' %>
      input_mapping:
        s3.scf-config: s3.scf-config-sles
      timeout: 5h
    <% end %> # enable_cf_upgrade
    <% if enable_cf_usb_upgrade_tests %>
    - task: usb-post-upgrade
      file: ci/qa-pipelines/tasks/usb-post-upgrade.yml
      params: *common-task-params
    <% end %> # enable_cf_usb_upgrade_tests
    # When this is _not_ an upgrade pipeline, we may wish to deploy CF before
    # running the tests.
    <% if enable_cf_deploy %>
    - task: cf-deploy
      file: ci/qa-pipelines/tasks/cf-deploy.yml
      params:
        << : *common-task-params
        << : *deploy-upgrade-params
        HA: <%= avail == 'HA' %>
      input_mapping:
        s3.scf-config: s3.scf-config-sles
      timeout: 5h
    <% end %> # enable_cf_deploy
    <% if enable_cf_smoke_tests %>
    - task: cf-smoke-tests
      file: ci/qa-pipelines/tasks/run-test.yml
      params:
        << : *common-task-params
        TEST_NAME: smoke-tests
      input_mapping:
        s3.scf-config: s3.scf-config-sles
      timeout: 1h
    <% end %> # enable_cf_smoke_tests
    <% if enable_cf_brain_tests %>
    - task: acceptance-tests-brain
      file: ci/qa-pipelines/tasks/run-test.yml
      params:
        << : *common-task-params
        TEST_NAME: acceptance-tests-brain
      input_mapping:
        s3.scf-config: s3.scf-config-sles
      timeout: 3h
    <% end %> # enable_cf_brain_tests
    <% if enable_cf_acceptance_tests %>
    - task: acceptance-tests
      file: ci/qa-pipelines/tasks/run-test.yml
      params:
        << : *common-task-params
        TEST_NAME: acceptance-tests
      input_mapping:
        s3.scf-config: s3.scf-config-sles
      timeout: 3h
    <% end %> # enable_cf_acceptance_tests
    # We intentionally don't put the teardown and pool release steps in an ensure
    # block, so that when tests fail we have a chance of examining why things are
    # failing.
    <% if enable_cf_teardown && !terraform_platform %>
    - task: cf-teardown
      file: ci/qa-pipelines/tasks/cf-teardown.yml
      timeout: 1h
      params: *common-task-params
      # no point in releasing without teardown
    - put: pool.kube-hosts
      params: {release: pool.kube-hosts}
    <% end %> # enable_cf_teardown && !terraform_platform
    <% if status_reporting %>
    on_success:
      put: status.src
      params:
        << : *status-params-<%= avail %>
        state: success
    <% end %> # status_reporting
    <% if status_reporting || klog_collection_on_failure %>
    on_failure:
      do:
      <% if status_reporting %>
      - put: status.src
        params:
          <<: *status-params-<%= avail %>
          state: failure
          <% if klog_collection_on_failure %>
          target_url: klog/target_url
          <% end %> # klog_collection_on_failure
      - task: generate-email
        file: ci/qa-pipelines/tasks/generate-email.yml
        params:
          <<: *common-task-params
      - put: status.email
        params:
          subject: email/subject
          body: email/body
      <% end %> # status_reporting
      <% if klog_collection_on_failure %>
      - put: s3.klog-destination
        params:
          file: klog/klog-*.tar.gz
      <% end %> # klog_collection_on_failure
    <% end %> # status_reporting || klog_collection_on_failure
    <% if terraform_platform %>
    ensure:
      do:
        - task: clean_terraform_deploy
          file: ci/qa-pipelines/tasks/clean_terraform_deploy.yml
          params:
            << : *common-task-params
            terraform_platform: <%= terraform_platform %>
        - put: pool.kube-hosts
          params: {remove: pool.kube-hosts}
    <% end %> # terraform_platform
<% end %> # %w(SA HA).each
