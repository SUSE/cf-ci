#!/usr/bin/env bash

set -o errexit -o nounset

usage() {
    cat <<EOF

${0} [options] <feature-flags preset file>

The pipeline configuration file "qa-pipeline.yml" must exist.
The configuration file "config-<config variant>.yml" must exist.

Available options:
    -h, --help          Print this help and exit
    -p, --prefix=       Set additional pipeline prefix
    --pool=provo        Pool to take pool config and kube config from. Default is 'provo'
    -t, --target=       Set fly target concourse
    -b, --branch=       Use a specific branch or tag. Defaults to the current branch
    --nightly           Deploy pipeline that triggers when new nightly builds are released
    --pr=               Deploy pipeline that tests a build from a specific PR

Note: --pr and --nightly flags cannot be used together

Note: Using the special preset file "pipeline-presets/single-brain.yml" will
deploy a pipeline which will allow you to select an individual brain test.
EOF
}

OPTS=$(getopt -o hp:t:b: --long help,nightly,pr:,pool:,prefix:,target:,branch: -- "$@")
eval set -- "${OPTS}"

pool=provo
src_ci_branch=$(git rev-parse --abbrev-ref HEAD)
prefix=""
target=""
secrets_file=""
while true ; do
    case "$1" in
        -h|--help)   usage ; exit 0 ;;
        -p|--prefix) prefix="${2%-}-" ; shift 2 ;;
        -t|--target) target="${2}" ; shift 2 ;;
        --pool)      pool="${2}" ; shift 2 ;;
        -b|--branch) src_ci_branch="${2}" ; shift 2 ;;
        --nightly)   [[ -z ${s3_config_prefix:-} ]] ; s3_config_prefix=nightly/ ; shift 1 ;;
        --pr)        [[ -z ${s3_config_prefix:-} ]] ; s3_config_prefix=prs/PR-${2}- ; shift 2 ;;
        --)          shift ; break ;;
        *)           printf "Internal error: unexpected arguments %s\n" "$*" >&2 ; exit 1 ;;
    esac
done
s3_config_prefix=${s3_config_prefix:-master/}

if test -z "${1:-}" ; then
    usage
    exit 1
fi
vars_file="config-${pool}.yml"
preset_file="${1}"
preset_name="$(basename ${preset_file} .yml)"
pipeline_name="${prefix}${preset_name}"


if ! test -r "${vars_file}" ; then
    usage >&2
    if test -n "${1:-}" ; then
        printf "Variables file %s is not readable\n" "${vars_file}" >&2
    fi
    exit 1
fi

# generate_pipeline will emit the pipeline definition on STDOUT; this deals with
# the single-brain special case.
generate_pipeline() {
  local pipeline_template='qa-pipeline.yml.erb'
  local preset_template="${preset_file}"
  local flags='flags.yml'
  if [[ "${preset_file}" == "pipeline-presets/single-brain.yml" ]]; then
    pipeline_template='single-brain.yml.erb'
    preset_template='pipeline-presets/single-brain.yml'
    flags='pipeline-presets/single-brain.yml'
  fi
  ruby generate-pipeline.rb "${pipeline_template}" "${preset_template}" "${flags}"
}

# If a concourse secrets file named after the pool exists, use that instead.
# This is useful for local testing (for alternative pool / s3 storage / etc.)
alt_secrets_file="CONCOURSE_SECRETS_FILE_${pool//-/_}"
if test -n "${!alt_secrets_file:-}" -a -r "${!alt_secrets_file:-}" ; then
    CONCOURSE_SECRETS_FILE="${!alt_secrets_file:-}"
fi

if test -n "${CONCOURSE_SECRETS_FILE:-}"; then
    if test -r "${CONCOURSE_SECRETS_FILE:-}" ; then
        secrets_file="${CONCOURSE_SECRETS_FILE}"
    else
        printf "ERROR: Secrets file %s is not readable\n" "${CONCOURSE_SECRETS_FILE}" >&2
        exit 2
    fi
fi

# Branch is assumed to be the current branch if not specified, but the concourse git
# resource doesn't allow commit references to be used directly.
if [[ -z $src_ci_branch ]] ||
    [[  $(echo $src_ci_branch | tr '[:upper:]' '[:lower:]') == head ]]; then
  printf "Failed to determine ref for git resource to use.\n" >&2
  printf "Checkout a branch or specify a branch/tag with '-b\n'" >&2
  exit 1
fi

# Now that we have the branch/tag, check that it exists in the remote with the URL specified
# in the config file's 'src_ci_repo'.

src_ci_repo=$(
  #Remove anchor references from vars file as they break parsing
  grep -v '\*' $vars_file \
  | ruby -r yaml -e "puts YAML.load(STDIN.read)['src-ci-repo']"
)
src_ci_remote=$(git remote -v | grep -F "$src_ci_repo (fetch)" | cut -f1 | head -1)

# If a matching remote couldn't be found, create one
if [[ -z $src_ci_remote ]]; then
  src_ci_remote=${pool}-src-ci-repo
  git remote add $src_ci_remote $src_ci_repo
fi

# Ensure we have the latest tag/branch updates from remote
git fetch $src_ci_remote

# Check that the tag/branch specified exists on the remote
if ! git ls-remote --exit-code $src_ci_remote $src_ci_branch; then
  printf "The branch/tag %s could not be found in repo %s\n" $src_ci_branch $src_ci_repo >&2
  exit 1
fi

# Append tag/branch name to pipeline name
pipeline_name=${pipeline_name}-${src_ci_branch//\//-}

# Determine if pipeline already exists. This will be used to pause the jobs by default
existing_pipeline_job_count=$(
  fly ${target:+"--target=${target}"} get-pipeline --json -p "${pipeline_name}" | \
    jq '.jobs | length'
)
if [[ ${existing_pipeline_job_count} -gt 0 ]]; then
  pipeline_already_existed=true
else
  pipeline_already_existed=false
fi

# We concatenate our secrets file, pipeline variables, preset file (which sets
# 'enable' flags for each task needed for this pipeline deployment), and an
# additional set of 'false' enable flags, for every flag which is not mentioned in
# the preset file. This is created by subtracting the keys in the preset file from
# the keys in flags.yml, which contains all possible enable flags
fly \
    ${target:+"--target=${target}"} \
    set-pipeline \
    --non-interactive \
    --pipeline="${pipeline_name}" \
    --var pipeline-name="${pipeline_name}" \
    --config=<(generate_pipeline) \
    --var src-ci-branch=${src_ci_branch} \
    --var s3-config-prefix-sles=${s3_config_prefix} \
    --load-vars-from=<(
        ${secrets_file:+gpg --decrypt --batch ${secrets_file}} # Import secrets
        sed '/^---$/d' < "${vars_file}"                        # Config vars
        sed '/^---$/d' < "${preset_file}"
        ruby -r yaml << EOF | tail -n+2
          pipeline_flags=YAML.load_file('${preset_file}').keys
          all_flags=YAML.load_file('flags.yml').keys
          puts YAML.dump((all_flags - pipeline_flags).zip([false].cycle).to_h)
EOF
    )

fly \
    ${target:+"--target=$target"} \
    expose-pipeline \
    --pipeline="${pipeline_name}"

if ! ${pipeline_already_existed}; then
  job_names=$(
    fly ${target:+"--target=${target}"} get-pipeline --json -p "${pipeline_name}" | \
      jq -r '.jobs[] | .name'
  )
  for job_name in ${job_names}; do
    fly ${target:+"--target=${target}"} pause-job -j "${pipeline_name}/${job_name}"
  done
  fly ${target:+"--target=${target}"} unpause-pipeline --pipeline="${pipeline_name}"
fi
