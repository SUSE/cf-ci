---
resource_types:
- name: docker-image
  type: docker-image
  privileged: true
  source:
    repository: concourse/docker-image-resource
    tag: latest

# This resource-type is needed because we require the `load_bases`
# keyword to handle the broker jobs. This feature exists for only 8
# days now, relative to Jan 26, 2018. The import can be removed when
# we are updated to a concourse which has this version of the resource
# type built into it (v321 has not).

resources:
- name: src
  type: git
  source:
    uri: ((src-repo))
    private_key: ((github-private-key))
    branch: ((src-branch))
- name: ci
  type: git
  source:
    uri: ((ci-repo))
    private_key: ((github-private-key))
    branch: ((ci-branch))
    paths:
    - cf-usb/tasks
- name: semver.cf-usb-sidecar-mysql
  type: semver
  source:
    initial_version: 0.0.0
    driver: s3
    bucket: ((s3-bucket))
    key: ((s3-prefix))cf-usb-sidecar-mysql.version
    access_key_id: ((s3-access-key))
    secret_access_key: ((s3-secret-key))
    endpoint: ((s3-endpoint))
    disable_ssl: ((s3-disable-ssl))
- name: semver.cf-usb-sidecar-postgres
  type: semver
  source:
    initial_version: 0.0.0
    driver: s3
    bucket: ((s3-bucket))
    key: ((s3-prefix))cf-usb-sidecar-postgres.version
    access_key_id: ((s3-access-key))
    secret_access_key: ((s3-secret-key))
    endpoint: ((s3-endpoint))
    disable_ssl: ((s3-disable-ssl))
- name: docker.base
  type: docker-image
  source:
    repository: ((docker-server))((docker-org))/cf-usb-sidecar
    tag: ((docker-tag))
    username: ((docker-username))
    password: ((docker-password))
    ca_certs:
    - domain: ((docker-cert-domain))
      cert: ((docker-cert-ca))
- name: docker.buildbase
  type: docker-image
  source:
    repository: ((docker-server))((docker-org))/cf-usb-sidecar-buildbase
    tag: ((docker-tag))
    username: ((docker-username))
    password: ((docker-password))
    ca_certs:
    - domain: ((docker-cert-domain))
      cert: ((docker-cert-ca))
- name: docker.mysql
  type: docker-image
  source:
    repository: ((docker-server))((docker-org))/cf-usb-sidecar-mysql
    tag: ((docker-tag))
    username: ((docker-username))
    password: ((docker-password))
- name: docker.mysql-setup
  type: docker-image
  source:
    repository: ((docker-server))((docker-org))/cf-usb-sidecar-mysql-setup
    tag: ((docker-tag))
    username: ((docker-username))
    password: ((docker-password))
- name: docker.mysql-db
  type: docker-image
  source:
    repository: ((docker-server))((docker-org))/cf-usb-sidecar-mysql-db
    tag: ((docker-tag))
    username: ((docker-username))
    password: ((docker-password))
- name: s3.mysql
  type: s3
  source:
    bucket: ((s3-bucket))
    access_key_id: ((s3-access-key))
    secret_access_key: ((s3-secret-key))
    endpoint: ((s3-endpoint))
    disable_ssl: ((s3-disable-ssl))
    regexp: ((s3-prefix))cf-usb-sidecar-mysql-(.*).tgz
- name: docker.postgres
  type: docker-image
  source:
    repository: ((docker-server))((docker-org))/cf-usb-sidecar-postgres
    tag: ((docker-tag))
    username: ((docker-username))
    password: ((docker-password))
- name: docker.postgres-db
  type: docker-image
  source:
    repository: ((docker-server))((docker-org))/cf-usb-sidecar-postgres-db
    tag: ((docker-tag))
    username: ((docker-username))
    password: ((docker-password))
- name: docker.postgres-setup
  type: docker-image
  source:
    repository: ((docker-server))((docker-org))/cf-usb-sidecar-postgres-setup
    tag: ((docker-tag))
    username: ((docker-username))
    password: ((docker-password))
- name: s3.postgres
  type: s3
  source:
    bucket: ((s3-bucket))
    access_key_id: ((s3-access-key))
    secret_access_key: ((s3-secret-key))
    endpoint: ((s3-endpoint))
    disable_ssl: ((s3-disable-ssl))
    regexp: ((s3-prefix))cf-usb-sidecar-postgres-(.*).tgz

jobs:
- name: catalog-service-manager
  plan:
  - aggregate:
    - get: src
      trigger: true
    - get: ci
      trigger: true
  - put: docker.buildbase
    get_params: {save: true}
    params:
      tag_as_latest: true
      build: src
      dockerfile: src/scripts/docker/Dockerfile-build
      build_args:
        base_image: ((buildbase-base-image))
        repo_cloud_tools: ((buildbase-repo-cloud-tools))
        repo_devel_languages_go: ((buildbase-repo-devel-languages-go))
        repo_extra: ((buildbase-repo-extra))
  - aggregate:
    - do:
      - task: generate
        file: ci/cf-usb/tasks/csm-generate.yml
        image: docker.buildbase
      - task: build
        file: ci/cf-usb/tasks/csm-build.yml
        image: docker.buildbase
        output_mapping:
          out: csm-binary
    - task: fix-buildbase
      file: ci/cf-usb/tasks/fix-base.yml
      image: docker.buildbase
      input_mapping:
        in: docker.buildbase
      output_mapping:
        out: docker.buildbase-fixed
  - put: docker.base
    params:
      load_base: docker.buildbase-fixed
      tag_as_latest: true
      build: csm-binary
- name: sidecar-mysql
  plan:
  - aggregate:
    - get: src
      passed: [catalog-service-manager]
      trigger: true
    - get: ci
      passed: [catalog-service-manager]
    - get: semver.cf-usb-sidecar-mysql
      params:
        pre: pre
    - get: docker.base
      passed: [catalog-service-manager]
      params:
        save: true
      trigger: true
    - get: docker.buildbase
      passed: [catalog-service-manager]
      params:
        save: true
      trigger: true
  - aggregate:
    - do:
      - task: generate
        image: docker.buildbase
        file: ci/cf-usb/tasks/csm-generate.yml
      - task: build
        image: docker.buildbase
        file: ci/cf-usb/tasks/service-build.yml
        params:
          DESTINATION: ((docker-server))
          SERVICE: mysql
        input_mapping:
          version: semver.cf-usb-sidecar-mysql
        output_mapping:
          docker-out: mysql-binary
          helm-out: mysql-helm
    - task: fix-base
      image: docker.buildbase
      file: ci/cf-usb/tasks/fix-base.yml
      input_mapping:
        in: docker.base
      output_mapping:
        out: docker.base-fixed
    - task: fix-buildbase
      image: docker.buildbase
      file: ci/cf-usb/tasks/fix-base.yml
      input_mapping:
        in: docker.buildbase
      output_mapping:
        out: docker.buildbase-fixed
  - aggregate:
    - put: docker.mysql
      params:
        build: mysql-binary
        load_bases:
        - docker.base-fixed
        - docker.buildbase-fixed
        tag_as_latest: true
        tag: mysql-binary/tag
      get_params:
        skip_download: true
    - put: docker.mysql-setup
      params:
        build: mysql-binary
        dockerfile: mysql-binary/Dockerfile-setup
        load_base: docker.buildbase-fixed
        tag_as_latest: true
        tag: mysql-binary/tag
      get_params:
        skip_download: true
    - put: docker.mysql-db
      params:
        build: mysql-binary
        dockerfile: mysql-binary/Dockerfile-db
        tag_as_latest: true
        tag: mysql-binary/tag
      get_params:
        skip_download: true
    - put: s3.mysql
      params:
        file: mysql-helm/cf-usb-sidecar-mysql*.tgz
  - put: semver.cf-usb-sidecar-mysql
    params:
      pre: pre
- name: sidecar-publish-mysql
  plan:
  - aggregate:
    # NOTE: none of this have trigger: because this *must* be a manual step
    - get: src
      passed: [sidecar-mysql]
    - get: ci
      passed: [sidecar-mysql]
    - get: s3.mysql
      passed: [sidecar-mysql]
    - get: docker.buildbase
      passed: [sidecar-mysql]
  - aggregate:
    - task: image-link
      image: docker.buildbase
      file: ci/cf-usb/tasks/service-image-link.yml
      params:
        RELEASE_TOOL_URL: ((charts-release-tool-url))
      input_mapping:
        bundle: s3.mysql
    - task: publish
      image: docker.buildbase
      file: ci/cf-usb/tasks/service-publish.yml
      params:
        SERVICE: mysql
        GITHUB_USER: ((charts-github-username))
        GITHUB_PASSWORD: ((charts-github-password))
        GITHUB_KEY: ((charts-github-private-key))
        GITHUB_ORGANIZATION: ((charts-github-org))
      input_mapping:
        bundle: s3.mysql
- name: sidecar-postgres
  plan:
  - aggregate:
    - get: src
      passed: [catalog-service-manager]
      trigger: true
    - get: ci
      passed: [catalog-service-manager]
    - get: semver.cf-usb-sidecar-postgres
      params:
        pre: pre
    - get: docker.base
      passed: [catalog-service-manager]
      params:
        save: true
      trigger: true
    - get: docker.buildbase
      passed: [catalog-service-manager]
      params:
        save: true
      trigger: true
  - aggregate:
    - do:
      - task: generate
        image: docker.buildbase
        file: ci/cf-usb/tasks/csm-generate.yml
      - task: build
        image: docker.buildbase
        file: ci/cf-usb/tasks/service-build.yml
        params:
          DESTINATION: ((docker-server))
          SERVICE: postgres
        input_mapping:
          version: semver.cf-usb-sidecar-postgres
        output_mapping:
          docker-out: postgres-binary
          helm-out: postgres-helm
    - task: fix-base
      image: docker.buildbase
      file: ci/cf-usb/tasks/fix-base.yml
      input_mapping:
        in: docker.base
      output_mapping:
        out: docker.base-fixed
    - task: fix-buildbase
      image: docker.buildbase
      file: ci/cf-usb/tasks/fix-base.yml
      input_mapping:
        in: docker.buildbase
      output_mapping:
        out: docker.buildbase-fixed
  - aggregate:
    - put: docker.postgres
      params:
        build: postgres-binary
        load_bases: [ docker.base-fixed, docker.buildbase-fixed ]
        tag_as_latest: true
        tag: postgres-binary/tag
      get_params:
        skip_download: true
    - put: docker.postgres-setup
      params:
        build: postgres-binary
        dockerfile: postgres-binary/Dockerfile-setup
        load_base: docker.buildbase-fixed
        tag_as_latest: true
        tag: postgres-binary/tag
      get_params:
        skip_download: true
    - put: docker.postgres-db
      params:
        build: postgres-binary
        dockerfile: postgres-binary/Dockerfile-db
        tag_as_latest: true
        tag: postgres-binary/tag
      get_params:
        skip_download: true
    - put: s3.postgres
      params:
        file: postgres-helm/cf-usb-sidecar-postgres*.tgz
  - put: semver.cf-usb-sidecar-postgres
    params:
      pre: pre
- name: sidecar-publish-postgres
  plan:
  - aggregate:
    # NOTE: none of this have trigger: because this *must* be a manual step
    - get: src
      passed: [sidecar-postgres]
    - get: ci
      passed: [sidecar-postgres]
    - get: s3.postgres
      passed: [sidecar-postgres]
    - get: docker.buildbase
      passed: [sidecar-postgres]
  - aggregate:
    - task: image-link
      image: docker.buildbase
      file: ci/cf-usb/tasks/service-image-link.yml
      params:
        RELEASE_TOOL_URL: ((charts-release-tool-url))
      input_mapping:
        bundle: s3.postgres
    - task: publish
      image: docker.buildbase
      file: ci/cf-usb/tasks/service-publish.yml
      params:
        SERVICE: postgres
        GITHUB_USER: ((charts-github-username))
        GITHUB_PASSWORD: ((charts-github-password))
        GITHUB_KEY: ((charts-github-private-key))
        GITHUB_ORGANIZATION: ((charts-github-org))
      input_mapping:
        bundle: s3.postgres
