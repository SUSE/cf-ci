#!/usr/bin/env bash

set -ox errexit -o nounset

usage() {
    cat <<EOF

${0} [options]

The pipeline configuration file "pipeline.yml.erb" must exist.
The configuration file "config.yml" must exist.

Available options:
    -h, --help          Print this help and exit.
    -t, --target=       Set fly target concourse.
    -b, --branch=       Use a specific branch or tag. Defaults to the current branch.
    -p, --pipeline=     Name of the directory containing pipeline definition.

EOF
}

OPTS=$(getopt -o hp:t:b: --long help,target:,branch:,pipeline: -- "$@")
eval set -- "${OPTS}"

src_ci_branch=$(git rev-parse --abbrev-ref HEAD)
target=""
secrets_file=""
while true ; do
    case "${1}" in
        -h|--help)   usage ; exit 0 ;;
        -t|--target) target="${2}" ; shift 2 ;;
        -p|--pipeline) pipeline="${2}" ; shift 2 ;;
        -b|--branch) src_ci_branch="${2}" ; shift 2 ;;
        --)          shift ; break ;;
        *)           printf "Internal error: unexpected arguments %s\n" "$*" >&2 ; exit 1 ;;
    esac
done

if [[ -z "${target}" ]] || [[ -z "${pipeline}" ]]; then
    usage
    exit 1
fi

pipeline_config="${pipeline}/config.yml"

if test -n "${CONCOURSE_SECRETS_FILE:-}"; then
    if test -r "${CONCOURSE_SECRETS_FILE:-}" ; then
        secrets_file="${CONCOURSE_SECRETS_FILE}"
    else
        printf "ERROR: Secrets file %s is not readable\n" "${CONCOURSE_SECRETS_FILE}" >&2
        exit 2
    fi
fi

# generate_pipeline will emit the pipeline definition on STDOUT
generate_pipeline() {
  local pipeline_template="${pipeline}/pipeline.yml.erb"
  ruby generate-pipeline.rb "${pipeline_template}" "${pipeline_config}" <(${secrets_file:+gpg --decrypt --batch ${secrets_file}})
}

# Branch is assumed to be the current branch if not specified, but the concourse git
# resource doesn't allow commit references to be used directly.
if [[ -z $src_ci_branch ]] ||
    [[  $(echo $src_ci_branch | tr '[:upper:]' '[:lower:]') == head ]]; then
  printf "Failed to determine ref for git resource to use.\n" >&2
  printf "Checkout a branch or specify a branch/tag with '-b\n'" >&2
  exit 1
fi

# Now that we have the branch/tag, check that it exists in the remote with the URL specified
# in the config file's 'src_ci_repo'.

src_ci_repo=$(
  #Remove anchor references from vars file as they break parsing
  grep -v '\*' ${pipeline_config} \
  | ruby -r yaml -e "puts YAML.load(STDIN.read)['src-ci-repo']"
)
src_ci_remote=$(git remote -v | grep -F "$src_ci_repo (fetch)" | cut -f1 | head -1)

# If a matching remote couldn't be found, create one
if [[ -z $src_ci_remote ]]; then
  src_ci_remote=${pool}-src-ci-repo
  git remote add $src_ci_remote $src_ci_repo
fi

# Ensure we have the latest tag/branch updates from remote
git fetch $src_ci_remote

# Check that the tag/branch specified exists on the remote
if ! git ls-remote --exit-code $src_ci_remote $src_ci_branch; then
  printf "The branch/tag %s could not be found in repo %s\n" $src_ci_branch $src_ci_repo >&2
  exit 1
fi

# Append tag/branch name to pipeline name
pipeline_name=${pipeline}-${src_ci_branch//\//-}

# Determine if pipeline already exists. This will be used to pause the jobs by default
existing_pipeline_job_count=$(
  fly ${target:+"--target=${target}"} get-pipeline --json -p "${pipeline_name}" | \
    jq '.jobs | length'
)
if [[ ${existing_pipeline_job_count} -gt 0 ]]; then
  pipeline_already_existed=true
else
  pipeline_already_existed=false
fi

fly \
    ${target:+"--target=${target}"} \
    set-pipeline \
    --non-interactive \
    --pipeline="${pipeline_name}" \
    --config=<(generate_pipeline) \
    --var src-ci-branch=${src_ci_branch}

fly \
    ${target:+"--target=$target"} \
    expose-pipeline \
    --pipeline="${pipeline_name}"

if ! ${pipeline_already_existed}; then
  job_names=$(
    fly ${target:+"--target=${target}"} get-pipeline --json -p "${pipeline_name}" | \
      jq -r '.jobs[] | .name'
  )
  for job_name in ${job_names}; do
    fly ${target:+"--target=${target}"} pause-job -j "${pipeline_name}/${job_name}"
  done
  fly ${target:+"--target=${target}"} unpause-pipeline --pipeline="${pipeline_name}"
fi
